package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

import hello.dtos.*;
import hello.models.*;
import hello.repositories.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/orderingApp") // This means URL's start with /orderingApp (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private OrderRepository orderRepository;
    @Autowired
    private ItemRepository itemRepository;
    @Autowired
    private TrapeziRepository trapeziRepository;

    @PostMapping(path="/addUser") // Map ONLY GET Requests
    public @ResponseBody User addNewUser (@RequestBody User_dto user_dto) {

        User newUser = new User();
        newUser.setUsername(user_dto.getUsername());
        newUser.setPassword(user_dto.getPassword());
        userRepository.save(newUser);
        return newUser;
    }

    @PostMapping(path="/deleteUser")
    public @ResponseBody User deleteUser(@RequestBody Integer id) {

        User newUser = userRepository.findById(id).orElse(null);
        userRepository.deleteById(id);
        return newUser;
    }

    @PostMapping(path="/deleteTrapezi")
    public @ResponseBody Trapezi deleteTrapezi(@RequestBody String trapezi_id) {

        Trapezi newTrapezi = trapeziRepository.findById(trapezi_id).orElse(null);
        trapeziRepository.deleteById(trapezi_id);
        return newTrapezi;
    }

    @PostMapping(path="/addOrder")
    public @ResponseBody Order addNewOrder(@RequestBody Order_dto order_dto){

        User waiter = userRepository.findById(order_dto.getWaiter_id()).orElse(null);
        List<ItemBridge> orderItems = new ArrayList<ItemBridge>();
        for (ItemBridge_dto value : order_dto.getListItems()){
            Item item = itemRepository.findById(value.getItem_id()).orElse(null);
            orderItems.add(new ItemBridge(item,value.getQuantity()));
        }
        Order newOrder = new Order(order_dto.getKoyber(),waiter, orderItems);
        orderRepository.save(newOrder);
        return newOrder;
    }

    @PostMapping(path="/addItem")
    public @ResponseBody Item addNewItem (@RequestBody Item_dto item_dto){

        Item newItem = new Item();
        newItem.setName(item_dto.getName());
        newItem.setPrice(item_dto.getPrice());
        newItem.setDescription(item_dto.getDescription());
        newItem.setCtgry(item_dto.getCtgry());
        itemRepository.save(newItem);
        return newItem;
    }

    @PostMapping(path="/addTrapezi")
    public @ResponseBody Trapezi addNewTrapezi (@RequestBody Trapezi_dto trapezi_dto){

        Trapezi newTrapezi = new Trapezi();
        newTrapezi.setTrapezi_id(trapezi_dto.getTrapezi_id());
        newTrapezi.setStatus(false);
        trapeziRepository.save(newTrapezi);
        return newTrapezi;
    }

    @GetMapping(path="/getUsers")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/getItems")
    public @ResponseBody Iterable<Item> getItems() {
        // This returns a JSON or XML with the users
        return itemRepository.findAll();
    }

    @GetMapping(path="/getItemsByCtgry")
    public @ResponseBody Iterable<Item> getItemsByCtgry(@RequestParam String type) {
        // This returns a JSON or XML with the users
        return itemRepository.findByCtgry(type);
    }

    @GetMapping(path="/getTrapezia")
    public @ResponseBody Iterable<Trapezi> getTrapezia() {
        // This returns a JSON or XML with the users
        return trapeziRepository.findAll();
    }


}

